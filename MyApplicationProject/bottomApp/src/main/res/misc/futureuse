

--------------------------BookcaseAdapter.java
package com.group2.bottomapp;

import android.app.Activity;
import android.app.SearchManager;
import android.content.Intent;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.group2.bottomapp.utils.SectionableAdapter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A sample Adapter that demonstrates one use of the SectionableAdapter class,
 * using a hard-coded two-dimensional array for the data source.
 *
 * @author Velos Mobile
 */
/*
 * Copyright � 2012 Velos Mobile
 */
public class BookcaseAdapter extends SectionableAdapter implements
		View.OnClickListener {

	// For simplicity, we hard-code the headers and data. In an actual app, this
	// can come from the network, the filesystem, SQLite, or any of the
	// usual suspects.
    String[] Ings;
    String[] IngsID;
    String[] Cats;
    String[] CatID;
	static final String[] AUTHORS = new String[] { "Roberto Bola�o",
			"David Mitchell", "Haruki Murakami", "Thomas Pynchon" };
	private static final String[][] BOOKS = new String[][] {
			{ "The Savage Detectives", "2666" },
			{ "Ghostwritten", "number9dream", "Cloud Atlas",
					"Black Swan Green", "The Thousand Autumns of Jacob de Zoet" },
			{ "A Wild Sheep Chase",
					"Hard-Boiled Wonderland and the End of the World",
					"Norwegian Wood", "Dance Dance Dance",
					"South of the Border, West of the Sun",
					"The Wind-Up Bird Chronicle", "Sputnik Sweetheart",
					"Kafka on the Shore", "After Dark", "1Q84" },
			{ "V.", "The Crying of Lot 49", "Gravity's Rainbow", "Vineland",
					"Mason & Dixon", "Against the Day", "Inherent Vice" } };

	private Activity activity;
    private LinkedHashMap<String, ArrayList<Ingredient>> items;
    private ArrayList<Categories> categories;
    private int sectionSize;


    public BookcaseAdapter(Activity activity, LayoutInflater inflater,
			int rowLayoutID, int headerID, int itemHolderID, int resizeMode, String[] Ings, String[] Cats) {
		super(inflater, rowLayoutID, headerID, itemHolderID, resizeMode, Ings, Cats);
		this.activity = activity;
        //this.sectionSize = Cats.length;
        this.Ings = Ings;
        this.Cats = Cats;

        this.items = items;
        this.categories = categories;
        this.sectionSize = categories.size();
        //Log.i("bookcasee",categories.entrySet().size()+"");
	}


    public void getItems(){
        Iterator<Map.Entry<String, ArrayList<Ingredient>>> itr = items.entrySet().iterator();

        while(itr.hasNext()){
            Map.Entry<String,  ArrayList<Ingredient>> itrr = itr.next();
            Log.i("itrrr",itrr.getKey()+"<->"+itrr.getValue());
        }
    }



    @Override
    protected void bindView(View convertView, int position) {
        String title = (String) getItem(position);
        String id = "1";
        TextView label = (TextView) convertView.findViewById(R.id.bookItem_title);
        TextView labelId = (TextView) convertView.findViewById(R.id.drinkID);

        label.setText(title);
        labelId.setText(id);
        convertView.setOnClickListener(this);
    }

    @Override
    protected String getHeaderForSection(int section) {
        /*Iterator<Map.Entry<String, ArrayList<Ingredient>>> itr = items.entrySet().iterator();
        String value = "";
        while(itr.hasNext()){
            Map.Entry<String,  ArrayList<Ingredient>> itrr = itr.next();
            Log.i("itrrr",itrr.getKey()+"<->"+itrr.getValue());
            value += itrr.getKey()+",";
        }
        Cats = value.split(",");*/
        Log.i("secc", section+"");
        return categories.get(1).getName();
        //return AUTHORS[section];
    }


    @Override
	public Object getItem(int position) {

        Log.i("poss", ""+position);
        //Log.i("size", ""+items.entrySet().size());
      //  String value = "";
        //String id = "";
       /* Iterator<Map.Entry<String, ArrayList<Ingredient>>> itr = items.entrySet().iterator();
        while(itr.hasNext()){
            Map.Entry<String,  ArrayList<Ingredient>> itrr = itr.next();
            for(Ingredient ing : itrr.getValue()){
                value += ing.getName()+",";
                id += ing.getId()+",";
            }
        }*/
        //Ings = value.split(",");
        //IngsID = id.split(",");
		//for (int i = 0; i < Ings.length; ++i) {
		//	if (position < Ings.length) {
        ArrayList<Ingredient> ingredientsinCat = APIManager.getIngredientsByCategory(categories.get(position).getId());
                Log.i("poss getItem", "<->"+position);
        return ingredientsinCat.get(position).getName();
				//return Ings[position];
		//	}
		//	position -= Ings.length;
		//}
		// This will never happen.
		//return null;
	}

	@Override
	protected int getDataCount() {
		int total = 0;
		for (int i = 0; i < BOOKS.length; ++i) {
			total += BOOKS[i].length;
		}
		return 3;
	}

	@Override
	protected int getSectionsCount() {
        //categories = APIManager.getCategories();
        Log.i("cattt", "" + Cats.length);
		return Cats.length;
	}



	@Override
	protected int getCountInSection(int index) {
        //ArrayList<Ingredient> ings = APIManager.getIngredientsByCategory(2);
        return 1;
	}

	@Override
	protected int getTypeFor(int position) {
		int runningTotal = 0;
		int i = 0;
		for (i = 0; i < BOOKS.length; ++i) {
			int sectionCount = BOOKS[i].length;
			if (position < runningTotal + sectionCount)
				return i;
			runningTotal += sectionCount;
            Log.i("poss gettypefor", i+"<->"+runningTotal);
		}
		// This will never happen.
		return -1;
	}




	@Override
	public void onClick(View v) {
		//Intent i = new Intent(Intent.ACTION_SEARCH);
		TextView label = (TextView) v.findViewById(R.id.bookItem_title);
        TextView id = (TextView) v.findViewById(R.id.drinkID);
		String text = label.getText().toString();
        String idText = id.getText().toString();
        Log.i("iddd", idText.toString());
		//i.putExtra(SearchManager.QUERY, text);
		//activity.startActivity(i);
	}

}


-------------------------------DrinksCabinet
package com.group2.bottomapp;

import android.app.Dialog;
import android.content.Context;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.os.Bundle;
import android.os.Vibrator;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;


import com.group2.bottomapp.SectionedGridViewAdapter.OnGridItemClickListener;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;


public class DrinksCabinet extends Fragment implements View.OnClickListener, GridView.OnItemClickListener, OnGridItemClickListener {


    //public ArrayList<HashMap<Integer, String>> drinkListt = new ArrayList<HashMap<Integer, String>>();
    protected static final String TAG = "DrinksCabinet";
    private ListView listView;
    private Dataset dataSet;
    private SectionedGridViewAdapter adapter = null;
    private LinkedHashMap<String, MatrixCursor> cursorMap;
    private ListAdapter la;
    ArrayList<Categories> categories;
    private int selectedItem;
    private TextView dialogText;
    private TextView alcoholrate;
    private TextView cabinet;
    private ImageView dialogImage;
    private Button removeButton;
    private Button cancelButton;



    @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.drinkscapinet, container, false);
            setHasOptionsMenu(true);



        cabinet = (TextView)rootView.findViewById(R.id.textCabinet);
        cabinet.setTextColor(getResources().getColor(R.color.ColorWhite));

        if(HelperClass.User.userName.endsWith("s")){
            cabinet.setText(HelperClass.User.userName + " " + "Liquor Cabinet");
        }else{
            cabinet.setText(HelperClass.User.userName + "'s Liquor Cabinet");
        }

        dataSet = new Dataset();

        categories = APIManager.getCategories();

        for(Categories cat : categories){
                Log.i("Catt", cat.getName()+" "+cat.getId());
                ArrayList<Ingredient> ingredientsinCat = APIManager.getIngredientsByCategory(cat.getId());
                Log.i("Catt", ingredientsinCat.size()+"");
                dataSet.addSection(cat.getName(), ingredientsinCat);
        }
        cursorMap = dataSet.getSectionCursorMap();


        listView = (ListView) rootView.findViewById(R.id.listview);
        listView.getViewTreeObserver().addOnGlobalLayoutListener(
                new OnGlobalLayoutListener() {

                    @Override
                    public void onGlobalLayout() {
                        listView.getViewTreeObserver()
                                .removeGlobalOnLayoutListener(this);

                        // now check the width of the list view
                        int width = listView.getWidth();

                        adapter = new SectionedGridViewAdapter(
                                getActivity(), cursorMap, listView
                                .getWidth(), listView.getHeight(),
                                getResources().getDimensionPixelSize(
                                        R.dimen.grid_item_size));

                        adapter.setListener(DrinksCabinet.this);
                        listView.setAdapter(adapter);

                        listView.setDividerHeight(adapter
                                .gapBetweenChildrenInRow());

                    }
                });


           return rootView;
        }




    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        /*if(parent == vodkaGridView){
            selectedItem = position;
            String text = gridArray.get(selectedItem).getName();
            int imageId = gridArray.get(selectedItem).getImageId();
            dialog(text,imageId);
            //Toast.makeText(getActivity(), gridArray.get(position).getName(), Toast.LENGTH_SHORT).show();
        }*/
    }
       @Override
        public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
            inflater.inflate(R.menu.drinkscabinetmenu, menu);
            super.onCreateOptionsMenu(menu, inflater);
        }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.addToCabinet:
                Fragment newFragment = new addToCabinet();
                FragmentTransaction transaction = getFragmentManager().beginTransaction();
                transaction.replace(R.id.main, newFragment);
                transaction.addToBackStack(null);
                transaction.commit();
                return true;
            default:
                break;
        }
        return false;
    }



    public void dialog(final String text, int imageID, final String category){
        final Dialog dialog = new Dialog(getActivity());
        dialog.setContentView(R.layout.drinkcabinetdialog);
        dialog.setTitle(category);
        dialog.setCancelable(true);

        dialogText = (TextView) dialog.findViewById(R.id.dialogText);
        dialogImage = (ImageView) dialog.findViewById(R.id.dialogImage);
        removeButton = (Button) dialog.findViewById(R.id.buttonRemove);
        cancelButton = (Button) dialog.findViewById(R.id.buttonCancel);

        removeButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Vibrator vib = (Vibrator) getActivity().getSystemService(Context.VIBRATOR_SERVICE);
                vib.vibrate(500);
                dialog.dismiss();
            }
        });
        cancelButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                dialog.cancel();

            }
        });

        dialogText.setText(text);
        dialogImage.setImageResource(imageID);

        dialog.show();

    }

    @Override
    public void onGridItemClicked(String sectionName, int position, View v) {
        Cursor sectionCursor = cursorMap.get(sectionName);
        Log.d("gridd", sectionName+"<->"+sectionCursor);

        if(sectionCursor.moveToPosition(position)) {
            String data = sectionCursor.getString(0);
            String msg = "Item clicked is:" + data;
            Toast.makeText(this.getActivity(), msg, Toast.LENGTH_SHORT).show();
            Log.d("gridd", "" + sectionName);
            dialog(data, R.drawable.bottle_one, sectionName);
            Iterator<Map.Entry<String, MatrixCursor>> itr = cursorMap.entrySet().iterator();
            while(itr.hasNext()/* && !itr.next().getKey().equals(sectionName)*/){
              Map.Entry<String, MatrixCursor> itrr = itr.next();
                if(itrr.getKey().equals(sectionName)){
                    MatrixCursor cursor = itrr.getValue();
                    cursor.moveToFirst();
                    Toast.makeText(this.getActivity(), itrr.getKey()+"<->"+cursor, Toast.LENGTH_SHORT).show();
                    Log.i("itrr yees..", itrr.getKey() + "<->" + cursor.getString(0));

                    //adapter.notifyDataSetChanged();
                    break;
                }
                Log.i("itrr not..", itrr.getKey());

                /*cursorMap.entrySet().remove(sectionName);
                adapter.remove(1);
                adapter.notifyDataSetChanged();*/

                //cursorMap.not

            }
        }
    }

    @Override
    public void onClick(View view) {

    }
}
------------------------Dataset

package com.group2.bottomapp;

/**
 * Created by sam on 12/4/13.
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import android.database.Cursor;
import android.database.MatrixCursor;
import android.util.Log;

public class Dataset {

    private LinkedHashMap<String, ArrayList<Ingredient>> sectionItems = new LinkedHashMap<String, ArrayList<Ingredient>>();

    public static final String DATA_COLUMN = "data";

    public static final int TYPE_DATA = 1;

    public static final String ITEM_PREFIX = "data-";

    public static final String[] COLUMNS = new String[] { DATA_COLUMN, "_id" };

    private static volatile int INDEX = 1;

    private LinkedHashMap<String, MatrixCursor> sectionCursors = new LinkedHashMap<String, MatrixCursor>();



    public void addSection(String sectionName, ArrayList<Ingredient> arrayList) {
        sectionItems.put(sectionName, arrayList);
    }

    public MatrixCursor getSectionCursor(String sectionName) {
        MatrixCursor cursor = (MatrixCursor) sectionCursors.get(sectionName);
        if( cursor == null) {
            cursor = new MatrixCursor(COLUMNS);
            //int items = sectionItems.get(sectionName);

            // now add item rows
            Iterator<Map.Entry<String, ArrayList<Ingredient>>> itr = sectionItems.entrySet().iterator();
            while (itr.hasNext()) {
                Map.Entry<String, ArrayList<Ingredient>> entry = itr.next();
                String key = entry.getKey();
                Log.i("keyy", key);
                Log.i("keyy", "list"+entry.getValue());
                for(Ingredient listitem : entry.getValue()){
                    if(sectionName.contains(listitem.getCategoryName())){
                        String itemname = listitem.getName();
                        int itemId = listitem.getId();
                        Log.i("valuee", "array in array "+itemname+" "+itemId);
                        cursor.addRow(new Object[]{itemname, itemId});
                    }
                }
            }
            sectionCursors.put(sectionName, cursor);
        }

        return cursor;
    }

    public LinkedHashMap<String, MatrixCursor> getSectionCursorMap() {
        if(sectionCursors.isEmpty()) {
            for(String sectionName : sectionItems.keySet()) {
                getSectionCursor(sectionName);
            }
        }


        return sectionCursors;

    }

}


-----------------------Datasett
package com.group2.bottomapp;

/**
 * Created by sam on 12/4/13.
 */

import android.database.MatrixCursor;
import android.util.Log;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

public class Datasett {

    public  LinkedHashMap<String, ArrayList<Ingredient>> sections = new LinkedHashMap<String, ArrayList<Ingredient>>();
    public  LinkedHashMap<Integer, String> itemsInSection = new LinkedHashMap<Integer, String>();
    public  Object[] listObjects;
    public  int itemId;
    public  int categoryId;
    public  String item;
    public  String category;

    public Datasett(int itemId, int categoryId, String item, String category){
        this.itemId = itemId;
        this.categoryId = categoryId;
        this.category = category;
        this.item = item;
    }
    public Datasett(){

    }


    public  LinkedHashMap<String, ArrayList<Ingredient>> getSections() {
        return sections;
    }

    public void setSections(LinkedHashMap<String, ArrayList<Ingredient>> sections) {
        this.sections = sections;
    }
    public  void addSection(String sectionName, ArrayList<Ingredient> sectionItem) {
        sections.put(sectionName, sectionItem);
    }

    public  LinkedHashMap<Integer, String> getItemsInsections() {
        return itemsInSection;
    }

    public void setItemsInsection(LinkedHashMap<Integer, String> itemsInsections) {
        this.itemsInSection = itemsInsections;
    }

    public  Object[] getListObjects() {
        return listObjects;
    }

    public void setListObjects(Object[] listObjects) {
        this.listObjects = listObjects;
    }

    public  int getItemId() {
        return itemId;
    }

    public void setItemId(int itemId) {
        this.itemId = itemId;
    }

    public  int getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(int categoryId) {
        this.categoryId = categoryId;
    }

    public  String getItem() {
        return item;
    }

    public void setItem(String item) {
        this.item = item;
    }

    public  String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }



}
-------------------------

Layouts
-----------------------drinkcabinet

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:background="@drawable/background"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="20sp"
        android:text="Vodka"
        android:id="@+id/textCabinet" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:text="Vodka"
        android:id="@+id/vodkaText" />
    <ListView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_margin="5dp"
        android:id="@+id/listview"
        android:fastScrollEnabled="true"
        android:cacheColorHint="#00000000"
        android:background="#00000000"
        android:listSelector="#00000000"
        android:divider="#00000000"/>

</LinearLayout>


